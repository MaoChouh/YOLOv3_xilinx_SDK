/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "yolov2.h"

int main()
{
    init_platform();
    printf("YOLOv2 TEST Begin\n");
        char **names = get_la	bels("coco.names");
    	int x;
    	for(x=0;x<80;x++)//80 classe labels
    	{
    		printf("[%d]%s\n",x,names[x]);
    	}
        image **alphabet = load_alphabet();
        network *net = load_network("yolov2.cfg", "", 0);
        set_batch_network(net, 1);
    ////////////////////load img resize img begin
    	char buff[256];
        char *input_imgfn = buff;
    	strncpy(input_imgfn, "person.jpg", 256);
    	printf("Input img:%s\n",input_imgfn);
    	image im = load_image_stb(input_imgfn, 3);//3 channel img
    	printf("img w=%d,h=%d,c=%d\n",im.w,im.h,im.c);
    	image sized = letterbox_image(im, 416, 416);
    	save_image_png(sized, "sized");// convert to yolov3 net input size 416x416x3
    ////////////////////load img resize img end

    	time_t first, second;

    	layer l = net->layers[net->n-1];
        float *X = sized.data;
    	first=time(NULL);
        //network_predict(net, X);
    	yolov2_hls_ps(net, X);
    	second=time(NULL);
    	printf("%s: Predicted in %f seconds.\n", input_imgfn, difftime(second,first));

        int nboxes = 0;
        float nms=.45;
    	float thresh = .5;
    	float hier_thresh = .5;
        detection *dets = get_network_boxes(net, im.w, im.h, thresh, hier_thresh, 0, 1, &nboxes);
        printf("%d\n", nboxes);
    	//for(x=0;x<nboxes;x++)
    	//{
    	//	printf("[%3d]:h=%f,w=%f,x=%f,y=%f,objectness=%f\n",x,dets[x].bbox.h,dets[x].bbox.w,dets[x].bbox.x,dets[x].bbox.y,dets[x].objectness);
    	//}

        if (nms) do_nms_sort(dets, nboxes, l.classes, nms);
        draw_detections(im, dets, nboxes, thresh, names, alphabet, l.classes);

        free_detections(dets, nboxes);

    ///////////////////write predictions img
    	save_image_png(im, "predictions");// output

    	free_image(im);
        free_image(sized);

    cleanup_platform();
    return 0;
}
